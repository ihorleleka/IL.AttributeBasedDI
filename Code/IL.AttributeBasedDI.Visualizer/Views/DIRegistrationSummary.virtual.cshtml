@using IL.AttributeBasedDI.Visualizer.Converters
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@model IL.AttributeBasedDI.Models.ServiceGraph

<!DOCTYPE html>
<html>
<head>
    <title>DI Registration Summary</title>
    <meta name="color-scheme" content="dark">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background-color: #1e1e1e;
            color: #e0e0e0;
            box-sizing: border-box;
            overflow: hidden;
        }
    
        .container {
            width: 100%;
            height: calc(100vh - 150px);
            overflow: hidden;
        }
    
        #graph-container {
            border: 1px solid #444444;
            border-radius: 5px;
            padding: 20px;
            height: calc(100vh - 200px);
            overflow: hidden;
            background-color: #2d2d2d;
            box-sizing: border-box;
        }
    
        .node {
            cursor: pointer;
        }
    
        .node rect {
            stroke: #888888;
            stroke-width: 1.5px;
            rx: 5;
            ry: 5;
        }
    
        .node text {
            font-size: 12px;
            font-family: sans-serif;
            fill: #e0e0e0;
        }
    
        .link {
            fill: none;
            stroke: #777777;
            stroke-width: 1.5px;
        }
    
        .type-node rect {
            fill: #264b63;
        }
    
        .service-node rect {
            fill: #2a5a2a;
        }
    
        .decorator-node rect {
            fill: #8b6b2b;
        }
        
        rect[stroke-dasharray="5,5"] {
            stroke-width: 2px;
        }
    
        .tooltip {
            position: absolute;
            background-color: #3d3d3d;
            border: 1px solid #555555;
            border-radius: 4px;
            padding: 8px;
            font-size: 12px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s;
            color: #e0e0e0;
        }
    
        .legend {
            margin-bottom: 20px;
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
    
        .legend-item {
            display: flex;
            align-items: center;
            font-size: 14px;
        }
    
        .legend-color {
            width: 20px;
            height: 20px;
            margin-right: 8px;
            border: 1px solid #888888;
            border-radius: 3px;
        }
    
        .type-color {
            background-color: #264b63;
        }
    
        .service-color {
            background-color: #2a5a2a;
        }
    
        .decorator-color {
            background-color: #8b6b2b;
        }
        
        .context-menu {
            position: absolute;
            background-color: #3d3d3d;
            border: 1px solid #555555;
            border-radius: 4px;
            padding: 0;
            min-width: 150px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: none;
        }
        
        .context-menu-item {
            padding: 8px 12px;
            cursor: pointer;
            list-style: none;
            color: #e0e0e0;
        }
        
        .context-menu-item:hover {
            background-color: #4d4d4d;
        }
        
        .copy-success {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #2a5a2a;
            color: #e0e0e0;
            padding: 10px 15px;
            border-radius: 4px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 1100;
        }
        
        /* Ensure graph container doesn't overlap with search */
        #graph-container {
            position: relative;
            z-index: 0;
        }
        
        .search-container {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            align-items: center;
            z-index: 100;
            width: 250px;
        }
        
        .search-input {
            background-color: #3d3d3d;
            border: 1px solid #555555;
            border-radius: 4px;
            color: #e0e0e0;
            padding: 8px 12px;
            width: 100%;
            font-size: 14px;
            box-sizing: border-box;
            position: relative;
            z-index: 101;
        }
        
        .search-input::placeholder {
            color: #999999;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #777777;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.1);
        }
        
        .node.hidden {
            display: none;
        }
        
        .link.hidden {
            display: none;
        }
    </style>
</head>
<body>
<h1>DI Registration Summary</h1>

<div class="search-container">
    <input type="text" id="searchInput" class="search-input" placeholder="Search types, services, decorators...">
</div>

<div class="legend">
    <div class="legend-item">
        <div class="legend-color type-color"></div>
        <div>Type</div>
    </div>
    <div class="legend-item">
        <div class="legend-color service-color"></div>
        <div>Service</div>
    </div>
    <div class="legend-item">
        <div class="legend-color decorator-color"></div>
        <div>Decorator</div>
    </div>
    <div class="legend-item">
        <div class="legend-color service-color" style="border-style: dashed; border-width: 2px;"></div>
        <div>Keyed Service</div>
    </div>
</div>

<div class="container">
    <div id="graph-container"></div>
</div>

<div class="tooltip" id="tooltip"></div>
<div class="context-menu" id="contextMenu">
    <div class="context-menu-item" id="copyFullName">Copy Full Name</div>
</div>
<div class="copy-success" id="copySuccess">Full name copied to clipboard!</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
    @{
    var dict = Model.ServicesByType.ToDictionary(
    x => CustomTypeConverter.BeautifyType(x.Key),
    y => y.Value
    );
    var graphDataJson = JsonConvert.SerializeObject(
    dict,
    Formatting.Indented,
    new StringEnumConverter(),
    new CustomTypeConverter()
    );
    }
    
    const graphData = @Html.Raw(graphDataJson);

    // Create the graph visualization
    function createGraph(data, searchTerm = '') {
        // Clear any existing graph
        d3.select("#graph-container").html("");
    
        const container = document.getElementById('graph-container');
        const margin = { top: 50, right: 120, bottom: 50, left: 120 };
        const width = container.clientWidth - margin.left - margin.right;
        const height = container.clientHeight - margin.top - margin.bottom;
        
        // Convert search term to lowercase for case-insensitive matching
        searchTerm = searchTerm.toLowerCase();

        // Create the SVG container
        const svg = d3.select("#graph-container")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Process data to create nodes and links
        const nodes = [];
        const links = [];
        let nodeId = 0;

        // Function to check if a node matches the search term
        function matchesSearch(name, fullName) {
            if (!searchTerm) return true;
            const searchLower = searchTerm.toLowerCase();
            return name.toLowerCase().includes(searchLower) || 
                   fullName.toLowerCase().includes(searchLower);
        }
        
        // Process types and services
        Object.entries(data).forEach(([typeName, services], typeIndex) => {
            const typeShortName = getShortName(typeName);
            const typeFullName = getFullName(typeName);
            
            // Check if type matches search
            const typeDirectMatch = searchTerm ? matchesSearch(typeShortName, typeFullName) : true;
            
            // Track if any of the services or decorators match for connectivity
            let hasMatchInSubgraph = typeDirectMatch;
            let servicesWithDirectMatches = [];
            let decoratorsWithDirectMatches = [];
            
            // Pre-scan for matches at any level to determine visibility
            if (searchTerm) {
                // Check each service for matches
                services.forEach(service => {
                    const serviceShortName = getShortName(service.ImplementationType);
                    const serviceFullName = getFullName(service.ImplementationType);
                    
                    const serviceDirectMatch = matchesSearch(serviceShortName, serviceFullName);
                    if (serviceDirectMatch) {
                        servicesWithDirectMatches.push(service);
                        hasMatchInSubgraph = true;
                    }
                    
                    // Check decorators for matches
                    if (service.Decorators && service.Decorators.length > 0) {
                        service.Decorators.forEach(decorator => {
                            const decoratorShortName = getShortName(decorator);
                            const decoratorFullName = getFullName(decorator);
                            
                            const decoratorDirectMatch = matchesSearch(decoratorShortName, decoratorFullName);
                            if (decoratorDirectMatch) {
                                decoratorsWithDirectMatches.push(decorator);
                                hasMatchInSubgraph = true;
                            }
                        });
                    }
                });
            }
            
            // Skip this type entirely if no matches in the subgraph
            if (searchTerm && !hasMatchInSubgraph) {
                return;
            }
            
            // If there's a match anywhere in the subgraph, show all connected nodes
            let servicesWithMatch = searchTerm ? 
                (hasMatchInSubgraph ? services : []) : 
                services;
            
            // Add type node
            const typeNode = {
                id: nodeId++,
                name: typeShortName,
                fullName: typeFullName,
                type: 'type',
                x: 0,
                y: typeIndex * 150,
                matches: matchesSearch(typeShortName, typeFullName)
            };
            nodes.push(typeNode);

            // Process services for this type
            let visibleServicesCount = 0;
            
            servicesWithMatch.forEach((service, serviceIndex) => {
                const serviceShortName = getShortName(service.ImplementationType);
                const serviceFullName = getFullName(service.ImplementationType);
                const serviceMatches = matchesSearch(serviceShortName, serviceFullName);
                
                const serviceNode = {
                    id: nodeId++,
                    name: serviceShortName,
                    fullName: serviceFullName,
                    lifetime: service.Lifetime,
                    features: service.Features || [],
                    key: service.Key || null,
                    type: 'service',
                    x: 200,
                    y: typeNode.y + visibleServicesCount * 60 - (servicesWithMatch.length - 1) * 30,
                    matches: serviceMatches
                };
                nodes.push(serviceNode);
                visibleServicesCount++;
            
                // Link from type to service
                links.push({
                    source: typeNode.id,
                    target: serviceNode.id
                });
            
                // Process decorators for this service
                if (service.Decorators && service.Decorators.length > 0) {
                    let prevNodeId = serviceNode.id;
                    
                    // In search mode with matches, we include all decorators
                    // In non-search mode, we include all decorators
                    // This ensures that when a match is found at any level, the entire connected subgraph is shown
                    
                    // Create info objects for all decorators with match information
                    const visibleDecorators = service.Decorators.map(decorator => {
                        const decoratorShortName = getShortName(decorator);
                        const decoratorFullName = getFullName(decorator);
                        
                        return {
                            decorator,
                            matches: searchTerm ? matchesSearch(decoratorShortName, decoratorFullName) : true
                        };
                    });
            
                    visibleDecorators.forEach((decoratorInfo, decoratorIndex) => {
                        const decoratorShortName = getShortName(decoratorInfo.decorator);
                        const decoratorFullName = getFullName(decoratorInfo.decorator);
                        
                        const decoratorNode = {
                            id: nodeId++,
                            name: decoratorShortName,
                            fullName: decoratorFullName,
                            type: 'decorator',
                            order: decoratorIndex + 1,
                            x: 400 + decoratorIndex * 150,
                            y: serviceNode.y,
                            matches: decoratorInfo.matches
                        };
                        nodes.push(decoratorNode);

                        // Link from previous node to decorator
                        links.push({
                            source: prevNodeId,
                            target: decoratorNode.id
                        });

                        prevNodeId = decoratorNode.id;
                    });
                }
            });
        });

        // Create a force simulation
        const simulation = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(d => d.id).distance(150))
            .force("charge", d3.forceManyBody().strength(-1000))
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force("x", d3.forceX().strength(0.1))
            .force("y", d3.forceY().strength(0.1));

        // Add links
        const link = svg.append("g")
            .selectAll("path")
            .data(links)
            .enter()
            .append("path")
            .attr("class", "link")
            .attr("marker-end", "url(#arrowhead)");

        // Define arrowhead marker
        svg.append("defs").append("marker")
            .attr("id", "arrowhead")
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 20)
            .attr("refY", 0)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#777777");

        // Add nodes
        const node = svg.append("g")
            .selectAll(".node")
            .data(nodes)
            .enter()
            .append("g")
            .attr("class", d => `node ${d.type}-node`)
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        // Node rectangles
        node.append("rect")
            .attr("width", d => Math.max(d.name.length * 7, 100))
            .attr("height", 40)
            .attr("x", d => -(Math.max(d.name.length * 7, 100) / 2))
            .attr("y", -20)
            .attr("stroke-dasharray", d => (d.type === 'service' && d.key) ? "5,5" : "none");

        // Node text
        node.append("text")
            .attr("dy", ".35em")
            .attr("text-anchor", "middle")
            .text(d => d.name);
            
        // Add visual emphasis to nodes that directly match search
        if (searchTerm) {
            node.filter(d => d.matches)
                .select("rect")
                .attr("stroke", "#ffcc00")
                .attr("stroke-width", 3);
        }

        // Tooltip functionality
        node.on("mouseover", function(event, d) {
            const tooltip = d3.select("#tooltip");
            
            let tooltipContent = `<strong>Type:</strong> ${d.type}<br><strong>Full Name:</strong> ${d.fullName}`;

            if (d.type === 'service') {
                tooltipContent += `<br><strong>Lifetime:</strong> ${d.lifetime}`;

                if (d.key) {
                    tooltipContent += `<br><strong>Key:</strong> ${d.key}`;
                }
            
                if (d.features && d.features.length > 0) {
                    tooltipContent += `<br><strong>Features:</strong> <ul style="margin:2px 0 0 15px; padding:0">`;
                    d.features.forEach(feature => {
                        tooltipContent += `<li>${feature}</li>`;
                    });
                    tooltipContent += `</ul>`;
                }
            }

            if (d.type === 'decorator') {
                tooltipContent += `<br><strong>Order:</strong> ${d.order}`;
            }

            tooltip.html(tooltipContent)
                .style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 20) + "px")
                .style("opacity", 1);
        })
            .on("mouseout", function() {
                d3.select("#tooltip").style("opacity", 0);
            })
            .on("contextmenu", function(event, d) {
                // Prevent the default context menu
                event.preventDefault();
                
                // Store the current node data for the context menu actions
                d3.select("#contextMenu").datum(d);
                
                // Position and show the context menu
                d3.select("#contextMenu")
                    .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY) + "px")
                    .style("display", "block");
            });

        // Update positions on simulation tick
        simulation.on("tick", () => {
            link.attr("d", d => {
                const sourceX = d.source.x;
                const sourceY = d.source.y;
                const targetX = d.target.x;
                const targetY = d.target.y;

                return `M${sourceX},${sourceY}L${targetX},${targetY}`;
            });

            node.attr("transform", d => `translate(${d.x},${d.y})`);
        });

        // Zoom functionality
        const zoom = d3.zoom()
            .scaleExtent([0.1, 3])
            .on("zoom", (event) => {
                svg.attr("transform", event.transform);
            });

        d3.select("#graph-container svg")
            .call(zoom);

        // Drag functions
        function dragstarted(event, d) {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(event, d) {
            d.fx = event.x;
            d.fy = event.y;
        }

        function dragended(event, d) {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }
    }

    // Helper function to get short name from fully qualified name
    function getShortName(fullName) {
        if (!fullName) {
            return "Unknown";
        }
        return  fullName.split('|')[0];
    }
    function getFullName(fullName) {
        if (!fullName) {
            return "Unknown";
        }
        return  fullName.split('|')[1];
    }

    // Function to copy text to clipboard
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(
            function() {
                // Show success message
                const copySuccess = document.getElementById('copySuccess');
                copySuccess.style.opacity = 1;
                
                // Hide after 2 seconds
                setTimeout(function() {
                    copySuccess.style.opacity = 0;
                }, 2000);
            }
        );
    }
    
    // Create the graph when the document is ready
    document.addEventListener('DOMContentLoaded', function() {
        createGraph(graphData);
        
        // Set up search functionality
        const searchInput = document.getElementById('searchInput');
        const searchContainer = document.querySelector('.search-container');
        
        // Ensure search container is responsive to clicks
        searchContainer.addEventListener('click', function(e) {
            if (e.target === searchContainer) {
                searchInput.focus();
            }
        });
        
        // Add specific click handler for the input
        searchInput.addEventListener('click', function(e) {
            e.stopPropagation();
        });
        
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.trim();
            
            // Recreate graph with search filter
            createGraph(graphData, searchTerm);
        });
        
        // Set up the Copy Full Name context menu action
        document.getElementById('copyFullName').addEventListener('click', function() {
            const contextMenu = d3.select("#contextMenu");
            const nodeData = contextMenu.datum();
            if (nodeData && nodeData.fullName) {
                copyToClipboard(nodeData.fullName);
            }
            contextMenu.style("display", "none");
        });
        
        // Hide context menu when clicking elsewhere
        document.addEventListener('click', function(event) {
            const contextMenu = document.getElementById('contextMenu');
            if (event.target.closest('#contextMenu') === null) {
                contextMenu.style.display = 'none';
            }
        });

        // Handle window resize
        window.addEventListener('resize', function() {
            createGraph(graphData);
        });
    });
</script>
</body>